play()
g + geom_point(aes(color=drv),size=2,alpha=0.5) + geom_smooth(size=4, linetype=3, method="lm", se = TRUE)
nxt()
g + geom_point(aes(color=drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type="l", ylim=c(-3,3))
ggplot(testdat, aes(x=myx, y=myy))
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
ggplot(testdat, aes(x = myx, y = myy))
g <- ggplot(testdat, aes(x = myx, y = myy))
ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g + geom_line()
g + geom_line(ylim(-3,3))
g + geom_line(aes(ylim(-3,3)))
g + ylim(-3,3)
g + geom_line() + ylim(-3,3)
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x=displ,y=hwy,color=factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins=TRUE)
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method="lm", se=FALSE, size=2,color="black")
g + geom_point() + facet_grid(drv~cyl, margins=TRUE) + geom_smooth(method="lm", se=FALSE, size=2,color="black") + labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
swirl()
str(diamonds)
qplot(price, data=diamonds)
range(diamonds$price)
qplot(price, data=diamonds, binwidth=18497/30)
brk
play()
table(brk, counts)
nxt()
counts
qplot(price, data=diamonds, binwidth=18497/30, fill=cut)
qplot(price, data=diamonds, geom="density")
qplot(price, data=diamonds, geom="density", color=cut))
qplot(price, data=diamonds, geom="density", color=cut)
qplot(carat, price, data=diamonds)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, color=cut)
qplot(carat, price, data=diamonds, color=cut, geom=c("point","smooth"), method="lm")
qplot(carat, price, data=diamonds, color=cut, geom=c("point","smooth"))
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm") + facets(.~cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) +
| geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
summary(g)
g + geom_point(alpha=1/3)
cutpoints <- quantile(diamonds$carat, seq(0,1,length=4, na.rm=TRUE))
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth,price))
g + geom_point(alpha=1/3, facet_grid(cut~car2))
g + geom_point(aes(alpha=1/3, facet_grid(cut~car2)))
g + geom_point(aes(alpha=1/3))
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2) + geom_smooth(method="lm", size=3, color="pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(.~cut())
ggplot(diamonds, aes(carat, price))
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut)
exit()
quit()
installed.packages()
library(swirl
)
0
version(r)
.libPaths
.libPaths()
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
install.packages(c("evaluate", "formatR", "RCurl"))
library(ggplot2)
install.packages("RCurl")
install.packages("ggplot2")
library(ggplot2)
library(colorspace)
?data.frame
install.packages("RCurl")
install.packages("RCurl")
?data.frame
df <- data.frame(rnorm())
?rnorm
df <- data.frame(rnorm(100, mean=340, sd=200))
df
?data.frame
col <- rnorm(5, 1.5)
col
col <- rnorm(10, 5, 1.5)
col
col1 <- rnorm(10, 5, 1.5)
col2 <- rnorm(10, 10, 1.5)
col3 <- rnorm(10, -10, 1.5)
df <- cbind(col1, col2, col2)
df <- cbind(col1, col2, col3)
df
heatmap(df)
df_switched <- cbind(col3, col2, col1)
?par
par(mfrow=c(1,3))
heatmap(df)
heatmap(df_switched)
df_
df_switched
df
heatmap(df)
heatmap(df_switched)
heatmap(df)
heatmap(df_switched)
heatmap(df)
col1 <- rnorm(1000, 324, 200)
col2 <- rnorm(1000, 212, 400)
col3 <- rnorn(1000, 500, 100)
col3 <- rnorm(1000, 500, 100)
df2 <- cbind(col1,col2,col3)
heatmap(df2)
head(df2$col2)
head(df2[1])
head(df2[1,])
head(df2)
heatmap(as.dendrogram(df2))
class(df2)
df2 <- as.data.frame(df2)
class(df2)
heatmap(as.dendrogram(df2))
?as.dendrogram
hc2 <- as.hclust(df2)
hc2 <- as.hclust.data.frame(df2)
?hclust
dist2 <- dist(df2)
heatmap(as.dendrogram(dist2))
hc2 <- as.hclust(dist2)
hc2 <- hclust(dist2)
hc2
heatmap(as.dendrogram(hc2))
class(hc2)
plot(hc2)
plot(dist2)
plot(dt2)
dry_times <- c(3.4, 2.5, 4.8, 2.9, 3.6, 2.8, 3.3, 5.6, 3.7, 2.8, 4.4, 4.0, 5.2, 3.0, 4.8)
length(dry_times)
mean(dry_times)
var(dry_times)
sd(dry_times)
swirl()
library(swirl)
swirl()
cmat
points(cx, cy, col=c("red","orange","purple"), pch=3, cex=2, lwd=2)
mdist(x,y,cx,cy)
apply(distTmp, 2, min())
apply(distTmp, col=2, min())
apply(distTmp)
apply(distTmp, 2, which.min)
points(x, y, pch=19, cex=2, col=cols1[newClust])
tapply(x, newClust, mean)
play()
newClust
x
nxt()
tapply(y, newClust, mean)
points(newCx, newCy, col=cols1, pch=8, cex=2, lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2, 2, which.min)
points(x,y,pch=19,cex=2,col=col1[newClust2])
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col=cols1, pch=9, cex=2, lwd=2)
kmeans(dataFrame, centers=)
kmeans(dataFrame, centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
point(kmObj$centers, col=c("black","red","green"), pch=3,cex=3,lwd=3)
points(kmObj$centers, col=c("black","red","green"), pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster, pch=19,cex=2)
library(swirl)
swirl()
head(dataMatrix)
heatmat(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R", local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
library(swirl)
swirl()
head(constantMatrix)
svd2$d
svd2$v[2]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1 <- svd()
a1 <- svd2
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1]) OR a1 <- svd1$u[,1] %*%
| t(svd1$v[,1]) * svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(sdv1$v[,1])
a1 <- (svd2$u[,1] * svd2$d[1]) %*% t(sdv2$v[,1])
a1 <- (svd2$u[,1] * svd2$d[1]) %*% t(svd1$v[,1])
a1 <- (svd1
$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,2] * svd1$d[2,\]
a2 <- svd1$u[,2] * svd1$d[2,]
a2 <- svd1$u[,2]
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
library(swirl)
swirl()
dim(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
ssd$activity
table(ssd$activity)
sub1 <- subset(ssd, subject=1)
sub1 <- subset(ssd, subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit(showXY.R)
myedit(showXY)
myEdit(showXY.R)
myedit("showXY.R")
showMe(1:6)
mdist <- dist(sub1[,1:3])
hclust(mdist)
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
svd$u
dim(svd$u)
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12])
mdist <- dist(sub1[,10:12,maxCon])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)], centers=6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers=6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying(kClust$size==29)
laying <- kClust$size==29
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
play()
kClust$size
kClust
nxt()
plot(kClust$centers[walkdown,1:12], pch=19, ylab="walkdown Cluster")
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
library(swirl)
swirl()
## Although the use of long variables may be cumbersome, I find it greatly
## eases the readability and keeping the data straight
## Loading the data
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
## Get the type to merge with NEI data
SCC_type <- subset(SCC, select = c("SCC", "Short.Name"))
## Subset the required data
baltimore_on_road <- subset(NEI_SCC, fips == "24510" & type =="ON-ROAD", c("Emissions", "year","type"))
la_on_road <- subset(NEI_SCC, fips == "06037" & type == "ON-ROAD", c("Emissions", "year", "type"))
## House-keeping: factorize type
baltimore_on_road$type <- as.factor(baltimore_on_road$type)
la_on_road$type <- as.factor(la_on_road$type)
## Get sums by year
baltimore_on_road_by_year <- aggregate(Emissions ~ year, baltimore_on_road, sum)
la_on_road_by_year <- aggregate(Emissions ~ year, la_on_road, sum)
## Open the graphing device
png(filename="plot6.png", height=480, width=480)
## Set up my canvas
par(mfrow=c(1,2))
## Plot
barplot(la_on_road_by_year$Emissions,
names.arg = la_on_road_by_year$year,
col=c("red"),
main="Los Angeles",
ylab="Tons of Emissions", ylim=c(0,5000))
barplot(baltimore_on_road_by_year$Emissions,
names.arg = baltimore_on_road_by_year$year,
col=c("blue"),
main="Baltimore City",
ylab="Tons of Emissions", ylim=c(0,5000))
dev.off()
setwd("C:/Users/Nikolos/Desktop/Data Science/Exploratory Data Analysis/Final_Project")
## Although the use of long variables may be cumbersome, I find it greatly
## eases the readability and keeping the data straight
## Loading the data
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
## Get the type to merge with NEI data
SCC_type <- subset(SCC, select = c("SCC", "Short.Name"))
## Subset the required data
baltimore_on_road <- subset(NEI_SCC, fips == "24510" & type =="ON-ROAD", c("Emissions", "year","type"))
la_on_road <- subset(NEI_SCC, fips == "06037" & type == "ON-ROAD", c("Emissions", "year", "type"))
## House-keeping: factorize type
baltimore_on_road$type <- as.factor(baltimore_on_road$type)
la_on_road$type <- as.factor(la_on_road$type)
## Get sums by year
baltimore_on_road_by_year <- aggregate(Emissions ~ year, baltimore_on_road, sum)
la_on_road_by_year <- aggregate(Emissions ~ year, la_on_road, sum)
## Open the graphing device
png(filename="plot6.png", height=480, width=480)
## Set up my canvas
par(mfrow=c(1,2))
## Plot
barplot(la_on_road_by_year$Emissions,
names.arg = la_on_road_by_year$year,
col=c("red"),
main="Los Angeles",
ylab="Tons of Emissions", ylim=c(0,5000))
barplot(baltimore_on_road_by_year$Emissions,
names.arg = baltimore_on_road_by_year$year,
col=c("blue"),
main="Baltimore City",
ylab="Tons of Emissions", ylim=c(0,5000))
dev.off()
?aggregate
baltimore_on_road_by_year <- aggregate(Emissions ~ year, baltimore_on_road, sum)
baltimore_on_road <- subset(NEI_SCC, fips == "24510" & type =="ON-ROAD", c("Emissions", "year","type"))
## Loading the data
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
## Get data-frames for each year
data_1999 <- subset(NEI, year==1999)
data_2002 <- subset(NEI, year==2002)
data_2005 <- subset(NEI, year==2005)
data_2008 <- subset(NEI, year==2008)
## Get the total emissions
total_1999 <- sum(data_1999$Emissions)
total_2002 <- sum(data_2002$Emissions)
total_2005 <- sum(data_2005$Emissions)
total_2008 <- sum(data_2008$Emissions)
## Make a vector for the barplot
totals_by_year <- c(total_1999, total_2002, total_2005, total_2008)
## convert tons to kilotons
totals_by_year <- sapply(totals_by_year, function(x) x/1000)
## Make a vector to label each bars by year
years <- as.numeric(as.character(unique(NEI$year)))
## Open up the graphing device (png)
png(filename="plot1.png", height=480, width=480)
## Make the plot
barplot(totals_by_year, names.arg = years,
col=c("blue", "red", "green", "orange"),
main="Total Emission Levels By Year",
ylab="Kilotons of Emission from All Sources",
ylim=c(0,8000))
## Close the png device
dev.off()
## Loading the data
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
## Sub-set the data
baltimore <- subset(NEI, fips=="24510")
## Sort each year
baltimore_1999 <- subset(baltimore, year==1999)
baltimore_2002 <- subset(baltimore, year==2002)
baltimore_2005 <- subset(baltimore, year==2005)
baltimore_2008 <- subset(baltimore, year==2008)
## Sum the emissions
baltimore_total_1999 <- sum(baltimore_1999$Emissions)
baltimore_total_2002 <- sum(baltimore_2002$Emissions)
baltimore_total_2005 <- sum(baltimore_2005$Emissions)
baltimore_total_2008 <- sum(baltimore_2008$Emissions)
## Create a vector to plot
baltimore_totals <- c(baltimore_total_1999, baltimore_total_2002,
baltimore_total_2005, baltimore_total_2008)
## Convert to kilotons
baltimore_totals <- sapply(baltimore_totals, function(x) x/1000)
## Get year vector for barnames
years <- as.numeric(as.character(unique(NEI$year)))
## Open plotting device
png(filename="plot2.png", width = 480, height=480)
## Plot
barplot(baltimore_totals, names.arg = years,
col=c("blue", "red", "green", "orange"),
main="Total Emissions in Baltimore City",
ylab="Kilotons of Emission from All Sources",
ylim=c(0,3.5))
## Close the device
dev.off()
## I would have preferred to do a barplot of this data so that the reader
## wouldn't think that we actually have the data from dates in between
## the years that we have, but I really haven't figured out how to work in ggplot2 yet
## Loading the data
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
library(ggplot2)
library(plyr)
## Sub-set the data
baltimore <- subset(NEI, fips=="24510")
## Get the right data sorted by type and total emissions
baltimore_totals_by_type <- ddply(baltimore, .(year,type), function(x) sum(x$Emissions))
## Name the cols
names(baltimore_totals_by_type)[3] <- "Total_Emissions"
## Open the graphing device
png(filename="plot3.png", height=480, width=480)
## Make the plot
qplot(year, Total_Emissions, data = baltimore_totals_by_type, color = type, geom = "line") +
ggtitle(expression("Baltimore City Emissions by Source Type and Year")) + xlab("Year") +
ylab(expression("Total" ~ PM[2.5] ~ "Emissions (tons)"))
dev.off()
## Loading the data
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
## Get the type to merge with NEI data
SCC_type <- subset(SCC, select = c("SCC", "Short.Name"))
## Merge the data
NEI_SCC <- merge(NEI, SCC_type, by.x="SCC", by.y="SCC", all=TRUE)
## Get coal related emissions
NEI_coal <- subset(NEI_SCC, grepl('Coal',NEI_SCC$Short.Name, fixed=TRUE), c("Emissions", "year","type", "Short.Name"))
## Get the desired info by year
coal_totals_by_year <- aggregate(Emissions ~ year, NEI_coal, sum)
## Convert to kilotons
coal_totals_by_year$Emissions <- sapply(coal_totals_by_year$Emissions, function(x) x/1000)
## Open the graphing device
png(filename="plot4.png", height=480, width=480)
## Make the plot
barplot(coal_totals_by_year$Emissions,
names.arg = coal_totals_by_year$year,
col=c("blue", "red", "green", "orange"),
main="Total Emissions from Coal in the USA",
ylab="Kilotons of Emissions from Coal", ylim=c(0,700))
dev.off()
## Although the use of long variables may be cumbersome, I find it greatly
## eases the readability and keeping the data straight
## Loading the data
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
## Get the type to merge with NEI data
SCC_type <- subset(SCC, select = c("SCC", "Short.Name"))
## Merge the data
NEI_SCC <- merge(NEI, SCC_type, by.x="SCC", by.y="SCC", all=TRUE)
## Subset the required data
baltimore_on_road <- subset(NEI_SCC, fips == "24510" & type =="ON-ROAD", c("Emissions", "year","type"))
## House-keeping: factorize type
baltimore_on_road$type <- as.factor(baltimore_on_road$type)
## Get sums by year
baltimore_on_road_by_year <- aggregate(Emissions ~ year, baltimore_on_road, sum)
## No need to convert to kilotons here
## Open the graphing device
png(filename="plot5.png", height=480, width=480)
# Plot
barplot(baltimore_on_road_by_year$Emissions,
names.arg = baltimore_on_road_by_year$year,
col=c("blue", "red", "green", "orange"),
main="Total Motor Vehicle Emissions in Baltimore City",
ylab="Tons of Emissions", ylim=c(0,350))
dev.off()
## Although the use of long variables may be cumbersome, I find it greatly
## eases the readability and keeping the data straight
## Loading the data
NEI <- readRDS("summarySCC_PM25.rds")
SCC <- readRDS("Source_Classification_Code.rds")
## Get the type to merge with NEI data
SCC_type <- subset(SCC, select = c("SCC", "Short.Name"))
## Merge the data
NEI_SCC <- merge(NEI, SCC_type, by.x="SCC", by.y="SCC", all=TRUE)
## Subset the required data
baltimore_on_road <- subset(NEI_SCC, fips == "24510" & type =="ON-ROAD", c("Emissions", "year","type"))
la_on_road <- subset(NEI_SCC, fips == "06037" & type == "ON-ROAD", c("Emissions", "year", "type"))
## House-keeping: factorize type
baltimore_on_road$type <- as.factor(baltimore_on_road$type)
la_on_road$type <- as.factor(la_on_road$type)
## Get sums by year
baltimore_on_road_by_year <- aggregate(Emissions ~ year, baltimore_on_road, sum)
la_on_road_by_year <- aggregate(Emissions ~ year, la_on_road, sum)
## Open the graphing device
png(filename="plot6.png", height=480, width=480)
## Set up my canvas
par(mfrow=c(1,2))
## Plot
barplot(la_on_road_by_year$Emissions,
names.arg = la_on_road_by_year$year,
col=c("red"),
main="Los Angeles",
ylab="Tons of Emissions", ylim=c(0,5000))
barplot(baltimore_on_road_by_year$Emissions,
names.arg = baltimore_on_road_by_year$year,
col=c("blue"),
main="Baltimore City",
ylab="Tons of Emissions", ylim=c(0,5000))
dev.off()
